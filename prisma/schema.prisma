datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  GUEST
  ADMIN
}

model User {
  id                       String                 @id @default(cuid())
  name                     String?
  email                    String?                @unique
  password                 String?
  emailVerified            DateTime?
  image                    String?
  role                     UserRole               @default(GUEST)
  isTwoFactorAuthenticated Boolean                @default(false)
  twoFactorConfirmation    TwoFactorConfirmation?
  accounts                 Account[]
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerifiationToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime
}
